{
  "version": 3,
  "sources": ["../../../src/index.js"],
  "sourceRoot": "D:\\Python\u811A\u672C\\MoonTV\\workers\\.wrangler\\tmp\\deploy-SM31B1",
  "sourcesContent": ["/**\r\n * MoonTV Cloudflare Workers API - v2.0\r\n * \u6DF7\u5408\u7528\u6237\u7CFB\u7EDF\u4E0E\u89C6\u9891\u6570\u636E\u5B58\u50A8\u7684\u5B8C\u6574\u89E3\u51B3\u65B9\u6848\r\n * \u517C\u5BB9MoonTV\u539F\u6709API\u63A5\u53E3\uFF0C\u65B0\u589E\u89C6\u9891\u6570\u636E\u7BA1\u7406\u529F\u80FD\r\n */\r\n\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url)\r\n    const path = url.pathname\r\n\r\n    // CORS \u5934\u90E8\r\n    const corsHeaders = {\r\n      'Access-Control-Allow-Origin': '*',\r\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\r\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-API-Key, X-Username',\r\n      'Access-Control-Max-Age': '86400',\r\n    }\r\n\r\n    // \u5904\u7406 OPTIONS \u9884\u68C0\u8BF7\u6C42\r\n    if (request.method === 'OPTIONS') {\r\n      return new Response(null, { headers: corsHeaders })\r\n    }\r\n\r\n    try {\r\n      // ==================== \u7528\u6237\u7CFB\u7EDFAPI (\u517C\u5BB9MoonTV) ====================\r\n      if (path === '/api/auth/login' && request.method === 'POST') {\r\n        return await handleLogin(request, env, corsHeaders)\r\n      } else if (path === '/api/auth/register' && request.method === 'POST') {\r\n        return await handleRegister(request, env, corsHeaders)\r\n      } else if (path === '/api/auth/verify' && request.method === 'POST') {\r\n        return await handleVerifyUser(request, env, corsHeaders)\r\n      } else if (path === '/api/user/change-password' && request.method === 'POST') {\r\n        return await handleChangePassword(request, env, corsHeaders)\r\n      \r\n      // \u64AD\u653E\u8BB0\u5F55API\r\n      } else if (path === '/api/playrecords' && request.method === 'GET') {\r\n        return await handleGetPlayRecords(request, env, corsHeaders)\r\n      } else if (path === '/api/playrecords' && request.method === 'POST') {\r\n        return await handleSetPlayRecord(request, env, corsHeaders)\r\n      } else if (path === '/api/playrecords' && request.method === 'DELETE') {\r\n        return await handleDeletePlayRecord(request, env, corsHeaders)\r\n      \r\n      // \u6536\u85CFAPI\r\n      } else if (path === '/api/favorites' && request.method === 'GET') {\r\n        return await handleGetFavorites(request, env, corsHeaders)\r\n      } else if (path === '/api/favorites' && request.method === 'POST') {\r\n        return await handleSetFavorite(request, env, corsHeaders)\r\n      } else if (path === '/api/favorites' && request.method === 'DELETE') {\r\n        return await handleDeleteFavorite(request, env, corsHeaders)\r\n      \r\n      // \u641C\u7D22\u5386\u53F2API\r\n      } else if (path === '/api/searchhistory' && request.method === 'GET') {\r\n        return await handleGetSearchHistory(request, env, corsHeaders)\r\n      } else if (path === '/api/searchhistory' && request.method === 'POST') {\r\n        return await handleAddSearchHistory(request, env, corsHeaders)\r\n      } else if (path === '/api/searchhistory' && request.method === 'DELETE') {\r\n        return await handleDeleteSearchHistory(request, env, corsHeaders)\r\n\r\n      // ==================== \u89C6\u9891\u6570\u636EAPI (\u65B0\u589E\u529F\u80FD) ====================\r\n      \r\n      // \u89C6\u9891\u641C\u7D22\u548C\u8BE6\u60C5\r\n      } else if (path === '/api/videos/search' && request.method === 'GET') {\r\n        return await handleSearchVideos(request, env, corsHeaders)\r\n      } else if (path === '/api/videos/aggregated' && request.method === 'GET') {\r\n        return await handleGetAggregatedVideos(request, env, corsHeaders)\r\n      } else if (path.startsWith('/api/videos/') && request.method === 'GET') {\r\n        return await handleGetVideoDetail(request, env, corsHeaders)\r\n      } else if (path === '/api/videos' && request.method === 'POST') {\r\n        return await handleCreateVideo(request, env, corsHeaders)\r\n      } else if (path === '/api/videos/batch' && request.method === 'POST') {\r\n        return await handleBatchCreateVideos(request, env, corsHeaders)\r\n      \r\n      // \u5206\u7C7B\u7BA1\u7406\r\n      } else if (path === '/api/categories' && request.method === 'GET') {\r\n        return await handleGetCategories(request, env, corsHeaders)\r\n      } else if (path === '/api/categories/hierarchy' && request.method === 'GET') {\r\n        return await handleGetCategoryHierarchy(request, env, corsHeaders)\r\n      } else if (path === '/api/categories' && request.method === 'POST') {\r\n        return await handleCreateCategory(request, env, corsHeaders)\r\n      \r\n      // \u6570\u636E\u91C7\u96C6API (\u517C\u5BB9autotasks\u63A5\u53E3)\r\n      } else if (path === '/api/collection/update_data' && request.method === 'POST') {\r\n        return await handleUpdateData(request, env, corsHeaders)\r\n      } else if (path === '/api/collection/run' && request.method === 'POST') {\r\n        return await handleRunCollection(request, env, ctx, corsHeaders)\r\n      } else if (path === '/api/collection/status' && request.method === 'GET') {\r\n        return await handleGetCollectionStatus(request, env, corsHeaders)\r\n      \r\n      // \u7EDF\u8BA1API\r\n      } else if (path === '/api/stats' && request.method === 'GET') {\r\n        return await handleGetStats(request, env, corsHeaders)\r\n      } else if (path === '/api/stats/dashboard' && request.method === 'GET') {\r\n        return await handleGetDashboardStats(request, env, corsHeaders)\r\n\r\n      // \u7BA1\u7406\u5458API\r\n      } else if (path === '/api/admin/users' && request.method === 'GET') {\r\n        return await handleGetAllUsers(request, env, corsHeaders)\r\n      } else if (path === '/api/admin/config' && request.method === 'GET') {\r\n        return await handleGetAdminConfig(request, env, corsHeaders)\r\n      } else if (path === '/api/admin/config' && request.method === 'POST') {\r\n        return await handleSetAdminConfig(request, env, corsHeaders)\r\n\r\n      } else {\r\n        return new Response('Not Found', { \r\n          status: 404, \r\n          headers: corsHeaders \r\n        })\r\n      }\r\n    } catch (error) {\r\n      console.error('API Error:', error)\r\n      return new Response(JSON.stringify({\r\n        code: 500,\r\n        msg: error.message || 'Internal Server Error',\r\n        data: null\r\n      }), {\r\n        status: 500,\r\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n      })\r\n    }\r\n  },\r\n\r\n  // \u5B9A\u65F6\u4EFB\u52A1\u5904\u7406\u5668\r\n  async scheduled(controller, env, ctx) {\r\n    console.log('\u5B9A\u65F6\u4EFB\u52A1\u5F00\u59CB\u6267\u884C:', new Date().toISOString())\r\n    \r\n    try {\r\n      // \u6267\u884C\u6570\u636E\u540C\u6B65\u4EFB\u52A1\r\n      await syncExternalData(env)\r\n      \r\n      // \u6E05\u7406\u8FC7\u671F\u7F13\u5B58\r\n      await cleanupExpiredCache(env)\r\n      \r\n      console.log('\u5B9A\u65F6\u4EFB\u52A1\u6267\u884C\u5B8C\u6210')\r\n    } catch (error) {\r\n      console.error('\u5B9A\u65F6\u4EFB\u52A1\u6267\u884C\u5931\u8D25:', error)\r\n    }\r\n  }\r\n}\r\n\r\n// ==================== \u5DE5\u5177\u51FD\u6570 ====================\r\n\r\nfunction createSuccessResponse(data, msg = 'success', corsHeaders = {}) {\r\n  return new Response(JSON.stringify({\r\n    code: 200,\r\n    msg,\r\n    data\r\n  }), {\r\n    status: 200,\r\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n  })\r\n}\r\n\r\nfunction createErrorResponse(code, msg, corsHeaders = {}, httpStatus = 400) {\r\n  return new Response(JSON.stringify({\r\n    code,\r\n    msg,\r\n    data: null\r\n  }), {\r\n    status: httpStatus,\r\n    headers: { ...corsHeaders, 'Content-Type': 'application/json' }\r\n  })\r\n}\r\n\r\n// \u83B7\u53D6\u7528\u6237\u540D\u4ECE\u8BF7\u6C42\u5934\r\nfunction getUserFromRequest(request) {\r\n  return request.headers.get('X-Username') || 'anonymous'\r\n}\r\n\r\n// \u9A8C\u8BC1\u7BA1\u7406\u5458\u6743\u9650\r\nasync function isAdmin(username, env) {\r\n  if (!username || username === 'anonymous') return false\r\n  \r\n  const user = await env.DB.prepare(\r\n    'SELECT is_admin FROM users WHERE username = ?'\r\n  ).bind(username).first()\r\n  \r\n  return user?.is_admin === 1\r\n}\r\n\r\n// ==================== \u7528\u6237\u7CFB\u7EDFAPI\u5904\u7406\u51FD\u6570 ====================\r\n\r\nasync function handleLogin(request, env, corsHeaders) {\r\n  try {\r\n    const { username, password } = await request.json()\r\n    \r\n    if (!username || !password) {\r\n      return createErrorResponse(400, '\u7528\u6237\u540D\u548C\u5BC6\u7801\u4E0D\u80FD\u4E3A\u7A7A', corsHeaders)\r\n    }\r\n\r\n    const user = await env.DB.prepare(\r\n      'SELECT username, is_admin FROM users WHERE username = ? AND password = ?'\r\n    ).bind(username, password).first()\r\n\r\n    if (!user) {\r\n      return createErrorResponse(401, '\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF', corsHeaders)\r\n    }\r\n\r\n    return createSuccessResponse({\r\n      username: user.username,\r\n      is_admin: user.is_admin === 1\r\n    }, '\u767B\u5F55\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u767B\u5F55\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u767B\u5F55\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleRegister(request, env, corsHeaders) {\r\n  try {\r\n    const { username, password } = await request.json()\r\n    \r\n    if (!username || !password) {\r\n      return createErrorResponse(400, '\u7528\u6237\u540D\u548C\u5BC6\u7801\u4E0D\u80FD\u4E3A\u7A7A', corsHeaders)\r\n    }\r\n\r\n    // \u68C0\u67E5\u7528\u6237\u662F\u5426\u5DF2\u5B58\u5728\r\n    const existingUser = await env.DB.prepare(\r\n      'SELECT username FROM users WHERE username = ?'\r\n    ).bind(username).first()\r\n\r\n    if (existingUser) {\r\n      return createErrorResponse(409, '\u7528\u6237\u540D\u5DF2\u5B58\u5728', corsHeaders)\r\n    }\r\n\r\n    // \u521B\u5EFA\u7528\u6237\r\n    await env.DB.prepare(\r\n      'INSERT INTO users (username, password) VALUES (?, ?)'\r\n    ).bind(username, password).run()\r\n\r\n    return createSuccessResponse({ username }, '\u6CE8\u518C\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u6CE8\u518C\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u6CE8\u518C\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleVerifyUser(request, env, corsHeaders) {\r\n  try {\r\n    const { username, password } = await request.json()\r\n    \r\n    const user = await env.DB.prepare(\r\n      'SELECT username FROM users WHERE username = ? AND password = ?'\r\n    ).bind(username, password).first()\r\n\r\n    return createSuccessResponse({ \r\n      valid: !!user \r\n    }, user ? '\u9A8C\u8BC1\u6210\u529F' : '\u9A8C\u8BC1\u5931\u8D25', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u9A8C\u8BC1\u7528\u6237\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u9A8C\u8BC1\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleChangePassword(request, env, corsHeaders) {\r\n  try {\r\n    const { username, oldPassword, newPassword } = await request.json()\r\n    \r\n    if (!username || !oldPassword || !newPassword) {\r\n      return createErrorResponse(400, '\u53C2\u6570\u4E0D\u5B8C\u6574', corsHeaders)\r\n    }\r\n\r\n    // \u9A8C\u8BC1\u65E7\u5BC6\u7801\r\n    const user = await env.DB.prepare(\r\n      'SELECT username FROM users WHERE username = ? AND password = ?'\r\n    ).bind(username, oldPassword).first()\r\n\r\n    if (!user) {\r\n      return createErrorResponse(401, '\u539F\u5BC6\u7801\u9519\u8BEF', corsHeaders)\r\n    }\r\n\r\n    // \u66F4\u65B0\u5BC6\u7801\r\n    await env.DB.prepare(\r\n      'UPDATE users SET password = ? WHERE username = ?'\r\n    ).bind(newPassword, username).run()\r\n\r\n    return createSuccessResponse(null, '\u5BC6\u7801\u4FEE\u6539\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u4FEE\u6539\u5BC6\u7801\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u4FEE\u6539\u5BC6\u7801\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\n// ==================== \u64AD\u653E\u8BB0\u5F55API ====================\r\n\r\nasync function handleGetPlayRecords(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    if (username === 'anonymous') {\r\n      return createErrorResponse(401, '\u672A\u6388\u6743\u8BBF\u95EE', corsHeaders)\r\n    }\r\n\r\n    const records = await env.DB.prepare(\r\n      'SELECT * FROM play_records WHERE username = ? ORDER BY save_time DESC'\r\n    ).bind(username).all()\r\n\r\n    const formattedRecords = {}\r\n    records.results.forEach(record => {\r\n      formattedRecords[record.key] = {\r\n        title: record.title,\r\n        source_name: record.source_name,\r\n        cover: record.cover,\r\n        year: record.year,\r\n        index: record.index_episode,\r\n        total_episodes: record.total_episodes,\r\n        play_time: record.play_time,\r\n        total_time: record.total_time,\r\n        save_time: record.save_time,\r\n        search_title: record.search_title\r\n      }\r\n    })\r\n\r\n    return createSuccessResponse(formattedRecords, '\u83B7\u53D6\u64AD\u653E\u8BB0\u5F55\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u83B7\u53D6\u64AD\u653E\u8BB0\u5F55\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u83B7\u53D6\u64AD\u653E\u8BB0\u5F55\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleSetPlayRecord(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    if (username === 'anonymous') {\r\n      return createErrorResponse(401, '\u672A\u6388\u6743\u8BBF\u95EE', corsHeaders)\r\n    }\r\n\r\n    const { key, record } = await request.json()\r\n    \r\n    if (!key || !record) {\r\n      return createErrorResponse(400, '\u53C2\u6570\u4E0D\u5B8C\u6574', corsHeaders)\r\n    }\r\n\r\n    await env.DB.prepare(`\r\n      INSERT OR REPLACE INTO play_records \r\n      (username, key, title, source_name, cover, year, index_episode, total_episodes, play_time, total_time, save_time, search_title)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `).bind(\r\n      username, key, record.title, record.source_name, record.cover, record.year,\r\n      record.index, record.total_episodes, record.play_time, record.total_time,\r\n      record.save_time, record.search_title || null\r\n    ).run()\r\n\r\n    return createSuccessResponse(null, '\u4FDD\u5B58\u64AD\u653E\u8BB0\u5F55\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u4FDD\u5B58\u64AD\u653E\u8BB0\u5F55\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u4FDD\u5B58\u64AD\u653E\u8BB0\u5F55\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleDeletePlayRecord(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    if (username === 'anonymous') {\r\n      return createErrorResponse(401, '\u672A\u6388\u6743\u8BBF\u95EE', corsHeaders)\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url)\r\n    const key = searchParams.get('key')\r\n    \r\n    if (!key) {\r\n      return createErrorResponse(400, '\u7F3A\u5C11key\u53C2\u6570', corsHeaders)\r\n    }\r\n\r\n    await env.DB.prepare(\r\n      'DELETE FROM play_records WHERE username = ? AND key = ?'\r\n    ).bind(username, key).run()\r\n\r\n    return createSuccessResponse(null, '\u5220\u9664\u64AD\u653E\u8BB0\u5F55\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u5220\u9664\u64AD\u653E\u8BB0\u5F55\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u5220\u9664\u64AD\u653E\u8BB0\u5F55\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\n// ==================== \u6536\u85CFAPI ====================\r\n\r\nasync function handleGetFavorites(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    if (username === 'anonymous') {\r\n      return createErrorResponse(401, '\u672A\u6388\u6743\u8BBF\u95EE', corsHeaders)\r\n    }\r\n\r\n    const favorites = await env.DB.prepare(\r\n      'SELECT * FROM favorites WHERE username = ? ORDER BY save_time DESC'\r\n    ).bind(username).all()\r\n\r\n    const formattedFavorites = {}\r\n    favorites.results.forEach(favorite => {\r\n      formattedFavorites[favorite.key] = {\r\n        title: favorite.title,\r\n        source_name: favorite.source_name,\r\n        cover: favorite.cover,\r\n        year: favorite.year,\r\n        total_episodes: favorite.total_episodes,\r\n        save_time: favorite.save_time,\r\n        search_title: favorite.search_title\r\n      }\r\n    })\r\n\r\n    return createSuccessResponse(formattedFavorites, '\u83B7\u53D6\u6536\u85CF\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u83B7\u53D6\u6536\u85CF\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u83B7\u53D6\u6536\u85CF\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleSetFavorite(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    if (username === 'anonymous') {\r\n      return createErrorResponse(401, '\u672A\u6388\u6743\u8BBF\u95EE', corsHeaders)\r\n    }\r\n\r\n    const { key, favorite } = await request.json()\r\n    \r\n    if (!key || !favorite) {\r\n      return createErrorResponse(400, '\u53C2\u6570\u4E0D\u5B8C\u6574', corsHeaders)\r\n    }\r\n\r\n    await env.DB.prepare(`\r\n      INSERT OR REPLACE INTO favorites \r\n      (username, key, title, source_name, cover, year, total_episodes, save_time, search_title)\r\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n    `).bind(\r\n      username, key, favorite.title, favorite.source_name, favorite.cover, \r\n      favorite.year, favorite.total_episodes, favorite.save_time, favorite.search_title || null\r\n    ).run()\r\n\r\n    return createSuccessResponse(null, '\u6DFB\u52A0\u6536\u85CF\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u6DFB\u52A0\u6536\u85CF\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u6DFB\u52A0\u6536\u85CF\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleDeleteFavorite(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    if (username === 'anonymous') {\r\n      return createErrorResponse(401, '\u672A\u6388\u6743\u8BBF\u95EE', corsHeaders)\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url)\r\n    const key = searchParams.get('key')\r\n    \r\n    if (!key) {\r\n      return createErrorResponse(400, '\u7F3A\u5C11key\u53C2\u6570', corsHeaders)\r\n    }\r\n\r\n    await env.DB.prepare(\r\n      'DELETE FROM favorites WHERE username = ? AND key = ?'\r\n    ).bind(username, key).run()\r\n\r\n    return createSuccessResponse(null, '\u5220\u9664\u6536\u85CF\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u5220\u9664\u6536\u85CF\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u5220\u9664\u6536\u85CF\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\n// ==================== \u641C\u7D22\u5386\u53F2API ====================\r\n\r\nasync function handleGetSearchHistory(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    if (username === 'anonymous') {\r\n      return createErrorResponse(401, '\u672A\u6388\u6743\u8BBF\u95EE', corsHeaders)\r\n    }\r\n\r\n    const history = await env.DB.prepare(\r\n      'SELECT keyword FROM search_history WHERE username = ? ORDER BY created_at DESC LIMIT 20'\r\n    ).bind(username).all()\r\n\r\n    const keywords = history.results.map(row => row.keyword)\r\n\r\n    return createSuccessResponse(keywords, '\u83B7\u53D6\u641C\u7D22\u5386\u53F2\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u83B7\u53D6\u641C\u7D22\u5386\u53F2\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u83B7\u53D6\u641C\u7D22\u5386\u53F2\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleAddSearchHistory(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    if (username === 'anonymous') {\r\n      return createErrorResponse(401, '\u672A\u6388\u6743\u8BBF\u95EE', corsHeaders)\r\n    }\r\n\r\n    const { keyword } = await request.json()\r\n    \r\n    if (!keyword) {\r\n      return createErrorResponse(400, '\u5173\u952E\u8BCD\u4E0D\u80FD\u4E3A\u7A7A', corsHeaders)\r\n    }\r\n\r\n    // \u5220\u9664\u53EF\u80FD\u5B58\u5728\u7684\u91CD\u590D\u8BB0\u5F55\r\n    await env.DB.prepare(\r\n      'DELETE FROM search_history WHERE username = ? AND keyword = ?'\r\n    ).bind(username, keyword).run()\r\n\r\n    // \u6DFB\u52A0\u65B0\u8BB0\u5F55\r\n    await env.DB.prepare(\r\n      'INSERT INTO search_history (username, keyword) VALUES (?, ?)'\r\n    ).bind(username, keyword).run()\r\n\r\n    // \u4FDD\u6301\u5386\u53F2\u8BB0\u5F55\u6761\u6570\u9650\u5236\r\n    await env.DB.prepare(`\r\n      DELETE FROM search_history \r\n      WHERE username = ? AND id NOT IN (\r\n        SELECT id FROM search_history \r\n        WHERE username = ? \r\n        ORDER BY created_at DESC \r\n        LIMIT 20\r\n      )\r\n    `).bind(username, username).run()\r\n\r\n    return createSuccessResponse(null, '\u6DFB\u52A0\u641C\u7D22\u5386\u53F2\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u6DFB\u52A0\u641C\u7D22\u5386\u53F2\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u6DFB\u52A0\u641C\u7D22\u5386\u53F2\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleDeleteSearchHistory(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    if (username === 'anonymous') {\r\n      return createErrorResponse(401, '\u672A\u6388\u6743\u8BBF\u95EE', corsHeaders)\r\n    }\r\n\r\n    const { searchParams } = new URL(request.url)\r\n    const keyword = searchParams.get('keyword')\r\n    \r\n    if (keyword) {\r\n      // \u5220\u9664\u7279\u5B9A\u5173\u952E\u8BCD\r\n      await env.DB.prepare(\r\n        'DELETE FROM search_history WHERE username = ? AND keyword = ?'\r\n      ).bind(username, keyword).run()\r\n    } else {\r\n      // \u6E05\u7A7A\u6240\u6709\u641C\u7D22\u5386\u53F2\r\n      await env.DB.prepare(\r\n        'DELETE FROM search_history WHERE username = ?'\r\n      ).bind(username).run()\r\n    }\r\n\r\n    return createSuccessResponse(null, '\u5220\u9664\u641C\u7D22\u5386\u53F2\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u5220\u9664\u641C\u7D22\u5386\u53F2\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u5220\u9664\u641C\u7D22\u5386\u53F2\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\n// ==================== \u89C6\u9891\u6570\u636EAPI ====================\r\n\r\nasync function handleSearchVideos(request, env, corsHeaders) {\r\n  try {\r\n    const { searchParams } = new URL(request.url)\r\n    const query = searchParams.get('q') || ''\r\n    const page = parseInt(searchParams.get('page')) || 1\r\n    const limit = parseInt(searchParams.get('limit')) || 20\r\n    const typeId = searchParams.get('type_id')\r\n    \r\n    const offset = (page - 1) * limit\r\n\r\n    let sql = `\r\n      SELECT v.*, t.type_name \r\n      FROM mac_vod v \r\n      LEFT JOIN mac_type t ON v.type_id = t.type_id \r\n      WHERE v.vod_status = 1\r\n    `\r\n    const params = []\r\n\r\n    if (query) {\r\n      sql += ' AND (v.vod_name LIKE ? OR v.vod_actor LIKE ? OR v.vod_director LIKE ?)'\r\n      const searchPattern = `%${query}%`\r\n      params.push(searchPattern, searchPattern, searchPattern)\r\n    }\r\n\r\n    if (typeId) {\r\n      sql += ' AND v.type_id = ?'\r\n      params.push(typeId)\r\n    }\r\n\r\n    sql += ' ORDER BY v.vod_time DESC LIMIT ? OFFSET ?'\r\n    params.push(limit, offset)\r\n\r\n    const videos = await env.DB.prepare(sql).bind(...params).all()\r\n\r\n    return createSuccessResponse({\r\n      videos: videos.results,\r\n      pagination: {\r\n        page,\r\n        limit,\r\n        total: videos.results.length\r\n      }\r\n    }, '\u641C\u7D22\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u641C\u7D22\u89C6\u9891\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u641C\u7D22\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleGetVideoDetail(request, env, corsHeaders) {\r\n  try {\r\n    const url = new URL(request.url)\r\n    const vodId = url.pathname.split('/').pop()\r\n\r\n    if (!vodId) {\r\n      return createErrorResponse(400, '\u89C6\u9891ID\u4E0D\u80FD\u4E3A\u7A7A', corsHeaders)\r\n    }\r\n\r\n    const video = await env.DB.prepare(`\r\n      SELECT v.*, t.type_name \r\n      FROM mac_vod v \r\n      LEFT JOIN mac_type t ON v.type_id = t.type_id \r\n      WHERE v.vod_id = ? AND v.vod_status = 1\r\n    `).bind(vodId).first()\r\n\r\n    if (!video) {\r\n      return createErrorResponse(404, '\u89C6\u9891\u4E0D\u5B58\u5728', corsHeaders)\r\n    }\r\n\r\n    // \u66F4\u65B0\u70B9\u51FB\u6570\r\n    await env.DB.prepare(\r\n      'UPDATE mac_vod SET vod_hits = vod_hits + 1, vod_time_hits = ? WHERE vod_id = ?'\r\n    ).bind(Math.floor(Date.now() / 1000), vodId).run()\r\n\r\n    return createSuccessResponse(video, '\u83B7\u53D6\u89C6\u9891\u8BE6\u60C5\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u83B7\u53D6\u89C6\u9891\u8BE6\u60C5\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u83B7\u53D6\u89C6\u9891\u8BE6\u60C5\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\n// ==================== \u5206\u7C7B\u7BA1\u7406API ====================\r\n\r\nasync function handleGetCategories(request, env, corsHeaders) {\r\n  try {\r\n    const categories = await env.DB.prepare(`\r\n      SELECT * FROM mac_type \r\n      WHERE type_status = 1 \r\n      ORDER BY type_sort ASC, type_id ASC\r\n    `).all()\r\n\r\n    return createSuccessResponse(categories.results, '\u83B7\u53D6\u5206\u7C7B\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u83B7\u53D6\u5206\u7C7B\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u83B7\u53D6\u5206\u7C7B\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\nasync function handleGetCategoryHierarchy(request, env, corsHeaders) {\r\n  try {\r\n    const categories = await env.DB.prepare(`\r\n      SELECT * FROM mac_type \r\n      WHERE type_status = 1 \r\n      ORDER BY type_sort ASC, type_id ASC\r\n    `).all()\r\n\r\n    // \u6784\u5EFA\u5C42\u7EA7\u7ED3\u6784\r\n    const hierarchy = []\r\n    const categoryMap = new Map()\r\n\r\n    // \u7B2C\u4E00\u904D\uFF1A\u521B\u5EFA\u6240\u6709\u5206\u7C7B\u7684\u6620\u5C04\r\n    categories.results.forEach(cat => {\r\n      categoryMap.set(cat.type_id, {\r\n        ...cat,\r\n        children: []\r\n      })\r\n    })\r\n\r\n    // \u7B2C\u4E8C\u904D\uFF1A\u6784\u5EFA\u5C42\u7EA7\u5173\u7CFB\r\n    categories.results.forEach(cat => {\r\n      if (cat.type_pid === 0) {\r\n        // \u9876\u7EA7\u5206\u7C7B\r\n        hierarchy.push(categoryMap.get(cat.type_id))\r\n      } else {\r\n        // \u5B50\u5206\u7C7B\r\n        const parent = categoryMap.get(cat.type_pid)\r\n        if (parent) {\r\n          parent.children.push(categoryMap.get(cat.type_id))\r\n        }\r\n      }\r\n    })\r\n\r\n    return createSuccessResponse(hierarchy, '\u83B7\u53D6\u5206\u7C7B\u5C42\u7EA7\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u83B7\u53D6\u5206\u7C7B\u5C42\u7EA7\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u83B7\u53D6\u5206\u7C7B\u5C42\u7EA7\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\n// ==================== \u7EDF\u8BA1API ====================\r\n\r\nasync function handleGetStats(request, env, corsHeaders) {\r\n  try {\r\n    const stats = await Promise.all([\r\n      env.DB.prepare('SELECT COUNT(*) as count FROM users').first(),\r\n      env.DB.prepare('SELECT COUNT(*) as count FROM mac_vod WHERE vod_status = 1').first(),\r\n      env.DB.prepare('SELECT COUNT(*) as count FROM mac_type WHERE type_status = 1').first(),\r\n      env.DB.prepare('SELECT COUNT(*) as count FROM play_records').first(),\r\n      env.DB.prepare('SELECT COUNT(*) as count FROM favorites').first()\r\n    ])\r\n\r\n    return createSuccessResponse({\r\n      users: stats[0].count,\r\n      videos: stats[1].count,\r\n      categories: stats[2].count,\r\n      play_records: stats[3].count,\r\n      favorites: stats[4].count\r\n    }, '\u83B7\u53D6\u7EDF\u8BA1\u4FE1\u606F\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u83B7\u53D6\u7EDF\u8BA1\u4FE1\u606F\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u83B7\u53D6\u7EDF\u8BA1\u4FE1\u606F\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\n// ==================== \u7BA1\u7406\u5458API ====================\r\n\r\nasync function handleGetAllUsers(request, env, corsHeaders) {\r\n  try {\r\n    const username = getUserFromRequest(request)\r\n    \r\n    if (!(await isAdmin(username, env))) {\r\n      return createErrorResponse(403, '\u6743\u9650\u4E0D\u8DB3', corsHeaders)\r\n    }\r\n\r\n    const users = await env.DB.prepare(\r\n      'SELECT username, is_admin, created_at FROM users ORDER BY created_at ASC'\r\n    ).all()\r\n\r\n    return createSuccessResponse(users.results, '\u83B7\u53D6\u7528\u6237\u5217\u8868\u6210\u529F', corsHeaders)\r\n\r\n  } catch (error) {\r\n    console.error('\u83B7\u53D6\u7528\u6237\u5217\u8868\u5931\u8D25:', error)\r\n    return createErrorResponse(500, '\u83B7\u53D6\u7528\u6237\u5217\u8868\u5931\u8D25', corsHeaders)\r\n  }\r\n}\r\n\r\n// ==================== \u6570\u636E\u91C7\u96C6\u76F8\u5173 (\u517C\u5BB9autotasks\u63A5\u53E3) ====================\r\n\r\nasync function handleUpdateData(request, env, corsHeaders) {\r\n  try {\r\n    const formData = await request.formData()\r\n    \r\n    const videoData = {\r\n      vod_name: formData.get('vod_name') || '',\r\n      vod_sub: formData.get('vod_sub') || '',\r\n      vod_pic: formData.get('vod_pic') || '',\r\n      vod_actor: formData.get('vod_actor') || '',\r\n      vod_director: formData.get('vod_director') || '',\r\n      vod_year: formData.get('vod_year') || '',\r\n      vod_area: formData.get('vod_area') || '',\r\n      vod_lang: formData.get('vod_lang') || '',\r\n      vod_content: formData.get('vod_content') || '',\r\n      vod_remarks: formData.get('vod_remarks') || '',\r\n      vod_serial: formData.get('vod_serial') || '',\r\n      vod_play_from: formData.get('vod_play_from') || '',\r\n      vod_play_url: formData.get('vod_play_url') || '',\r\n      vod_play_server: formData.get('vod_play_server') || '',\r\n      vod_play_note: formData.get('vod_play_note') || '',\r\n      type_name: formData.get('type_name') || '\u7535\u5F71',\r\n      vod_time: Math.floor(Date.now() / 1000)\r\n    }\r\n\r\n    if (!videoData.vod_name) {\r\n      return createErrorResponse(400, '\u89C6\u9891\u540D\u79F0\u4E0D\u80FD\u4E3A\u7A7A', corsHeaders)\r\n    }\r\n\r\n    // \u83B7\u53D6\u6216\u521B\u5EFA\u5206\u7C7BID\r\n    const typeId = await getOrCreateCategory(env.DB, videoData.type_name)\r\n    videoData.type_id = typeId\r\n\r\n    // \u68C0\u67E5\u89C6\u9891\u662F\u5426\u5DF2\u5B58\u5728\r\n    const existingVideo = await env.DB.prepare(\r\n      'SELECT vod_id FROM mac_vod WHERE vod_name = ? AND vod_play_from = ? LIMIT 1'\r\n    ).bind(videoData.vod_name, videoData.vod_play_from).first()\r\n\r\n    if (existingVideo) {\r\n      // \u66F4\u65B0\u73B0\u6709\u89C6\u9891\r\n      await env.DB.prepare(`\r\n        UPDATE mac_vod SET \r\n        vod_pic = ?, vod_actor = ?, vod_director = ?, vod_year = ?, vod_area = ?,\r\n        vod_lang = ?, vod_content = ?, vod_remarks = ?, vod_play_url = ?, vod_time = ?\r\n        WHERE vod_id = ?\r\n      `).bind(\r\n        videoData.vod_pic, videoData.vod_actor, videoData.vod_director, \r\n        videoData.vod_year, videoData.vod_area, videoData.vod_lang,\r\n        videoData.vod_content, videoData.vod_remarks, videoData.vod_play_url,\r\n        videoData.vod_time, existingVideo.vod_id\r\n      ).run()\r\n\r\n      return createSuccessResponse('ok-\u66F4\u65B0\u6210\u529F', '\u66F4\u65B0\u6210\u529F', corsHeaders)\r\n    } else {\r\n      // \u521B\u5EFA\u65B0\u89C6\u9891\r\n      await env.DB.prepare(`\r\n        INSERT INTO mac_vod (\r\n          type_id, vod_name, vod_sub, vod_pic, vod_actor, vod_director,\r\n          vod_year, vod_area, vod_lang, vod_content, vod_remarks, vod_serial,\r\n          vod_play_from, vod_play_url, vod_play_server, vod_play_note, vod_time, vod_time_add\r\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n      `).bind(\r\n        videoData.type_id, videoData.vod_name, videoData.vod_sub, videoData.vod_pic,\r\n        videoData.vod_actor, videoData.vod_director, videoData.vod_year, videoData.vod_area,\r\n        videoData.vod_lang, videoData.vod_content, videoData.vod_remarks, videoData.vod_serial,\r\n        videoData.vod_play_from, videoData.vod_play_url, videoData.vod_play_server,\r\n        videoData.vod_play_note, videoData.vod_time, videoData.vod_time\r\n      ).run()\r\n\r\n      return createSuccessResponse('ok-\u6DFB\u52A0\u6210\u529F', '\u6DFB\u52A0\u6210\u529F', corsHeaders)\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('\u66F4\u65B0\u6570\u636E\u5931\u8D25:', error)\r\n    return createErrorResponse(500, `\u66F4\u65B0\u6570\u636E\u5931\u8D25: ${error.message}`, corsHeaders)\r\n  }\r\n}\r\n\r\n// \u83B7\u53D6\u6216\u521B\u5EFA\u5206\u7C7B\r\nasync function getOrCreateCategory(db, typeName) {\r\n  if (!typeName) return 1 // \u9ED8\u8BA4\u5206\u7C7B\r\n\r\n  // \u67E5\u627E\u73B0\u6709\u5206\u7C7B\r\n  const existing = await db.prepare(\r\n    'SELECT type_id FROM mac_type WHERE type_name = ?'\r\n  ).bind(typeName).first()\r\n\r\n  if (existing) {\r\n    return existing.type_id\r\n  }\r\n\r\n  // \u521B\u5EFA\u65B0\u5206\u7C7B\r\n  const result = await db.prepare(\r\n    'INSERT INTO mac_type (type_name, type_sort) VALUES (?, 99)'\r\n  ).bind(typeName).run()\r\n\r\n  return result.meta.last_row_id\r\n}\r\n\r\n// ==================== \u5B9A\u65F6\u4EFB\u52A1\u76F8\u5173 ====================\r\n\r\nasync function syncExternalData(env) {\r\n  // \u8FD9\u91CC\u53EF\u4EE5\u5B9E\u73B0\u5B9A\u65F6\u540C\u6B65\u5916\u90E8API\u6570\u636E\u7684\u903B\u8F91\r\n  console.log('\u6267\u884C\u6570\u636E\u540C\u6B65\u4EFB\u52A1')\r\n}\r\n\r\nasync function cleanupExpiredCache(env) {\r\n  // \u6E05\u7406\u8FC7\u671F\u7F13\u5B58\r\n  console.log('\u6E05\u7406\u8FC7\u671F\u7F13\u5B58')\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
